
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 detected_cell_2.0.gltf 
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export default function Model({ rotationAxis, selectedGrids }) {
  debugger;
  const { nodes, materials } = useGLTF("/detected_cell_2.0.gltf");
  const brainRef = useRef();
  const gridRefs = {
    x: useRef(),
    y: useRef(),
    z: useRef(),
  };

  // State to hold the initial scale factor
  const [initialScale, setInitialScale] = useState(1);

  // Calculate the initial scale factor based on the bounding box dimensions
  useEffect(() => {
    const boundingBox = new THREE.Box3().setFromObject(brainRef.current);
    const size = new THREE.Vector3();
    boundingBox.getSize(size);
    const maxDimension = Math.max(size.x, size.y, size.z);
    const scaleFactor = 3 / maxDimension; // Adjust this factor as needed
    setInitialScale(scaleFactor);
  }, []);

  useFrame((state, delta) => {
    const adjustedDelta = delta * 0.15;

    if (rotationAxis === "auto") {
      brainRef.current.rotation.y += adjustedDelta;
      Object.values(gridRefs).forEach((gridRef) => {
        gridRef.current.rotation.y += adjustedDelta;
      });
    } else if (rotationAxis) {
      brainRef.current.rotation[rotationAxis] += adjustedDelta;
      gridRefs[rotationAxis].current.rotation[rotationAxis] += adjustedDelta;
    }
  });

  return (
    <group dispose={null} rotation={[-Math.PI / 2, 0, 0]}>
      {/* Brain Model */}
      <mesh
        geometry={nodes.detected_cells.geometry}
        material={nodes.detected_cells.material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[initialScale, initialScale, initialScale]}
        ref={brainRef}
      />
      {/* Grids */}
      <mesh ref={gridRefs.x} visible={selectedGrids.includes("x")}>
        {/* X Grid */}
        <gridHelper args={[4.75, 20]} rotation={[0, 0, 0]} />
      </mesh>
      <mesh ref={gridRefs.y} visible={selectedGrids.includes("y")}>
        {/* Y Grid */}
        <gridHelper args={[4.75, 20]} rotation={[0, 0, Math.PI / 2]} />
      </mesh>
      <mesh ref={gridRefs.z} visible={selectedGrids.includes("z")}>
        {/* Z Grid */}
        <gridHelper args={[4.75, 20]} rotation={[Math.PI / 2, 0, 0]} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/detected_cell_2.0.gltf");
